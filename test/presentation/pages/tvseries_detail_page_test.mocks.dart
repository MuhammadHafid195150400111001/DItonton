// Mocks generated by Mockito 5.1.0 from annotations
// in ditonton/test/presentation/pages/tvseries_detail_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i11;
import 'dart:ui' as _i12;

import 'package:ditonton/common/state_enum.dart' as _i9;
import 'package:ditonton/domain/entities/tvseries.dart' as _i10;
import 'package:ditonton/domain/entities/tvseries_detail.dart' as _i7;
import 'package:ditonton/domain/usecases/get_tvseries_detail.dart' as _i2;
import 'package:ditonton/domain/usecases/get_tvseries_recommendations.dart'
    as _i3;
import 'package:ditonton/domain/usecases/get_watchlist_status_tvseries.dart'
    as _i4;
import 'package:ditonton/domain/usecases/remove_watchlist_tvseries.dart' as _i6;
import 'package:ditonton/domain/usecases/save_watchlist_tvseries.dart' as _i5;
import 'package:ditonton/presentation/provider/tvseries_detail_notifier.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetTvseriesDetail_0 extends _i1.Fake
    implements _i2.GetTvseriesDetail {}

class _FakeGetTvseriesRecommendations_1 extends _i1.Fake
    implements _i3.GetTvseriesRecommendations {}

class _FakeGetWatchListStatusTvseries_2 extends _i1.Fake
    implements _i4.GetWatchListStatusTvseries {}

class _FakeSaveWatchlistTvseries_3 extends _i1.Fake
    implements _i5.SaveWatchlistTvseries {}

class _FakeRemoveWatchlistTvseries_4 extends _i1.Fake
    implements _i6.RemoveWatchlistTvseries {}

class _FakeTvseriesDetail_5 extends _i1.Fake implements _i7.TvseriesDetail {}

/// A class which mocks [TvseriesDetailNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvseriesDetailNotifier extends _i1.Mock
    implements _i8.TvseriesDetailNotifier {
  MockTvseriesDetailNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetTvseriesDetail get getTvseriesDetail =>
      (super.noSuchMethod(Invocation.getter(#getTvseriesDetail),
          returnValue: _FakeGetTvseriesDetail_0()) as _i2.GetTvseriesDetail);
  @override
  _i3.GetTvseriesRecommendations get getTvseriesRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getTvseriesRecommendations),
              returnValue: _FakeGetTvseriesRecommendations_1())
          as _i3.GetTvseriesRecommendations);
  @override
  _i4.GetWatchListStatusTvseries get getWatchListStatusTvseries =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatusTvseries),
              returnValue: _FakeGetWatchListStatusTvseries_2())
          as _i4.GetWatchListStatusTvseries);
  @override
  _i5.SaveWatchlistTvseries get saveWatchlistTvseries =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlistTvseries),
              returnValue: _FakeSaveWatchlistTvseries_3())
          as _i5.SaveWatchlistTvseries);
  @override
  _i6.RemoveWatchlistTvseries get removeWatchlistTvseries =>
      (super.noSuchMethod(Invocation.getter(#removeWatchlistTvseries),
              returnValue: _FakeRemoveWatchlistTvseries_4())
          as _i6.RemoveWatchlistTvseries);
  @override
  _i7.TvseriesDetail get tvseries =>
      (super.noSuchMethod(Invocation.getter(#tvseries),
          returnValue: _FakeTvseriesDetail_5()) as _i7.TvseriesDetail);
  @override
  _i9.RequestState get tvseriesState =>
      (super.noSuchMethod(Invocation.getter(#tvseriesState),
          returnValue: _i9.RequestState.Empty) as _i9.RequestState);
  @override
  List<_i10.Tvseries> get tvseriesRecommendations =>
      (super.noSuchMethod(Invocation.getter(#tvseriesRecommendations),
          returnValue: <_i10.Tvseries>[]) as List<_i10.Tvseries>);
  @override
  _i9.RequestState get recommendationState =>
      (super.noSuchMethod(Invocation.getter(#recommendationState),
          returnValue: _i9.RequestState.Empty) as _i9.RequestState);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get isAddedToWatchlist =>
      (super.noSuchMethod(Invocation.getter(#isAddedToWatchlist),
          returnValue: false) as bool);
  @override
  String get watchlistMessage =>
      (super.noSuchMethod(Invocation.getter(#watchlistMessage), returnValue: '')
          as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i11.Future<void> fetchTvseriesDetail(int? id) => (super.noSuchMethod(
      Invocation.method(#fetchTvseriesDetail, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  _i11.Future<void> addWatchlist(_i7.TvseriesDetail? tvseries) =>
      (super.noSuchMethod(Invocation.method(#addWatchlist, [tvseries]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  _i11.Future<void> removeFromWatchlist(_i7.TvseriesDetail? tvseries) =>
      (super.noSuchMethod(Invocation.method(#removeFromWatchlist, [tvseries]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i11.Future<void>);
  @override
  _i11.Future<void> loadWatchlistStatus(int? id) => (super.noSuchMethod(
      Invocation.method(#loadWatchlistStatus, [id]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i11.Future<void>);
  @override
  void addListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i12.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
